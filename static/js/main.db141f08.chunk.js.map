{"version":3,"sources":["logo.svg","components/ShellGame/index.js","components/TheGameOfShells/index.js","App.js","reportWebVitals.js","index.js","components/TheGameOfShells/index.module.scss","components/ShellGame/index.module.scss"],"names":["ShellGame","cups","useState","Math","floor","random","length","answer","setAnswer","guess","setGuess","shuffle","setShuffle","msg","setMsg","x","y","positions","setPositions","animations","reShuffle","generateNewPosition","position","isShellOverlap","acc","newPos","some","reduce","cur","shell","Object","assign","push","generateNewPositions","cupDisplay","map","cup","index","role","className","styles","style","transform","onClick","i","playBtn","ans","defaultProps","TheGameOfShells","hasShell","postions","setPostions","shuffleCounter","transCounter","endTransition","shuffleCups","checkPosition","createShuffle","current","pos","shufflePosition","newShellPositions","allPos","rand","splice","shuffleOnce","concat","Shell","win","show","onAnimationEnd","cupsDisplay","onTransitionEnd","console","log","newShells","aCup","screen","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.db141f08.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './index.module.scss'\n\nconst delay = async (ms) => new Promise(res => setTimeout(res, ms));\nconst wait = (ms) => {\n    var start = new Date().getTime();\n    var end = start;\n    while(end < start + ms) {\n      end = new Date().getTime();\n   }\n }\n\nconst ShellGame = ({cups}) => {\n  const [ answer, setAnswer ] = useState(Math.floor(Math.random() * cups.length))\n  const [ guess, setGuess ] = useState(false)\n  const [ shuffle, setShuffle ] = useState(false)\n  const [ msg, setMsg ] = useState('Press play to start')\n  const [ positions, setPositions] = useState([\n      { x: 0, y: 100},\n      { x: 80, y: 100},\n      { x: 160, y: 100 }\n  ]);\n  \n\n  function generateNewPositions() {\n  \n    function generateNewPosition(position) {\n      position.x = Math.floor(Math.random() * (700 - 80));\n      position.y = 100\n      return position;\n    }\n\n    function isShellOverlap(acc, newPos) {\n      return acc.some(({ x }) => {\n        const overlapX = (newPos.x >= x - 80) && (newPos.x <= x + 80);\n        return overlapX;\n      });\n    }\n    \n    const newPositions = positions\n      .reduce((acc, cur) => {\n        const shell = Object.assign({}, cur);\n        let newPos = generateNewPosition(shell);\n\n        while(isShellOverlap(acc, newPos)) {\n          newPos = generateNewPosition(shell);\n        }\n\n        acc.push(newPos);\n        return acc;\n      }, []);\n\n    return newPositions;\n  }\n\n  const animations = [ 'shuffle3' , 'shuffle2' , 'shuffle1']\n  \n  \n\n  const playGame = () => {\n    setShuffle(false)\n    let ans = Math.floor(Math.random() * cups.length)\n    setAnswer(ans)\n    setGuess(ans)\n   // wait(1000)\n    \n    reShuffle()\n      \n  }\n\n  const reShuffle = () => {\n    setGuess(false)\n    setShuffle(true)  \n    setPositions(generateNewPositions());\n  }\n\n  function reveal(i) {  \n    setGuess(i)\n    if(guess === i && answer === i) {\n        setMsg('You wont!')\n    } else {\n        setMsg('Try again')\n    }\n  }\n \n\n  const cupDisplay = cups\n    .map((cup, index) => \n  \n        <div\n            role=\"button\"\n            key={index}\n            className={`${styles.cup} ${shuffle && styles[animations[index]]}`}\n            style={{transform: `translate(${positions[index].x}px, ${positions[index].y}px)`}}\n            onClick={() => reveal(index)}\n            >\n            {(guess === index && answer === index ) ? \n             <span> 🐚</span>\n             :\n             (\n                guess === index ?\n                <span>🦀</span>\n                :\n                <span>{'?'}</span>\n             )\n            }\n        </div>\n    );\n\n  \n  return (\n    <>\n     <h1>The Games of Shells</h1>\n     <h2>{msg}</h2>\n     <button className={styles.playBtn}  onClick={playGame}>Play</button>\n     {cupDisplay}\n    </>\n  )\n}\n\nexport default ShellGame\n\nShellGame.defaultProps = {\n    cups: [\"A\", \"B\", \"C\"]\n}\n\nShellGame.propTypes = {\n    cups: PropTypes.array\n}\n\n","import React, { useState } from 'react'\nimport styles from './index.module.scss'\n\n\nconst TheGameOfShells = ({}) => {\n  const [answer, setAnswer] = useState(null);\n  const [guess, setGuess] = useState(null);\n  const [postions, setPostions] = useState([\n    [\n      { x: 140, hasShell: false },\n      { x: 280, hasShell: false },\n      { x: 420, hasShell: false },\n    ]\n  ]);\n  \n  const shuffleCounter = () =>  postions.length - 1\n  let transCounter = 0\n\n  const playGame = () => {\n    transCounter = 0\n    const cups = postions[postions.length - 1]\n    console.log('cups: ', cups)\n    const ans = Math.floor(Math.random() * cups.length)\n    const newShells = cups.map((cup, index) => {\n      const aCup = Object.assign({}, cup);\n      aCup.hasShell = index === ans\n      setAnswer(ans)\n      return aCup\n    });\n\n    setPostions([newShells])\n    setGuess(null)\n  }\n\n  function endTransition() {\n    transCounter++\n    if (transCounter % 3 === 0) {\n      shuffleCups()\n    }\n  }\n  \n  const checkPosition = (acc, newPos) => {\n    return acc.some(({ x }) => {\n      const overlapX = (newPos.x >= x - 140) && (newPos.x <= x + 140)\n      return overlapX;\n    });\n  }\n\n  const shufflePosition = (acc, pos) => {\n    pos.x = Math.floor(Math.random() * (1100))\n    while(checkPosition(acc, pos)) {\n      pos.x = Math.floor(Math.random() * (1100))\n    }\n    return pos\n  }\n\n  function createShuffle() {\n    const newPositions = postions[postions.length - 1]\n      .reduce((acc, current) => {\n        const pos = Object.assign({}, current)\n        let newPos = shufflePosition(acc , pos)\n        acc.push(newPos)\n        return acc\n      }, [])\n\n    return newPositions\n  }\n\n  const shuffleOnce = (cups) => {\n    const allPos = cups.map(({ x }) => x)\n    const finalSets = cups.map(cup => {\n      const rand = Math.floor(Math.random() * allPos.length)\n      cup.x = allPos[rand]\n      allPos.splice(rand, 1)\n      return cup\n    });\n\n    return finalSets\n  }\n\n\n  function shuffleCups() {\n    \n    if (shuffleCounter() === 6) {\n      return\n    }\n\n    const newShellPositions = shuffleCounter() === 5\n                              ? shuffleOnce(postions[0])\n                              : createShuffle()\n\n    setPostions(postions.concat([newShellPositions]))\n  }\n\n  \n\n  const Shell = (index) => {\n    return (\n    <span\n      className={\n        `${styles.shell}  \n        ${(guess && answer ===  guess )? styles.win: '' } \n        ${(postions.length === 1 && postions[0].some(cup => cup.hasShell))? styles.show: ''}\n        `}\n      onAnimationEnd={shuffleCups}>\n       🐚\n    </span>\n    )}\n\n  const cupsDisplay = postions[postions.length - 1]\n    .map((cup, i) =>\n      <button\n        key={i}\n        className={styles.cup}\n        style={{transform: `translate(${cup.x}px, 100px)`}}\n        onClick={() => setGuess(i)}\n        onTransitionEnd={endTransition} >\n        { cup.hasShell && <Shell index={i} /> }\n      </button>\n    );\n  \n\n  const msg = () => {\n   \n    if(!guess  && !answer) {\n        return 'Play press to start'\n    } else {\n      if( guess === answer){\n        return 'You won!'\n      } else {\n        return 'Try again'\n      }\n    }\n  }  \n  return (\n    <>\n        <button\n          className={styles.playBtn}\n          onClick={playGame} >\n          Play\n        </button>    \n        <h2>\n         {msg()}\n        </h2>\n        <div className={styles.screen}>\n          {cupsDisplay}\n        </div>\n      </>\n  )\n}\n\nexport default TheGameOfShells\n\n","import logo from './logo.svg';\nimport ShellGame  from './components/ShellGame'\nimport TheGameOfShells from './components/TheGameOfShells'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"container\">\n          <h1>The Game of Shells</h1>\n          <TheGameOfShells />\n        </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"TheGameOfShells_screen__1wf2C\",\"playBtn\":\"TheGameOfShells_playBtn__3N8nC\",\"cup\":\"TheGameOfShells_cup__1yqM7\",\"shell\":\"TheGameOfShells_shell__1vT1B\",\"win\":\"TheGameOfShells_win__uj-2n\",\"show\":\"TheGameOfShells_show__PSCo7\",\"materialize\":\"TheGameOfShells_materialize__3BQSW\",\"form__btn\":\"TheGameOfShells_form__btn__21G56\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ShellGame_container__CH_P1\",\"playBtn\":\"ShellGame_playBtn__2G3B4\",\"cup\":\"ShellGame_cup__3IaeZ\",\"shuffle1\":\"ShellGame_shuffle1__2uf0u\",\"first\":\"ShellGame_first__35One\",\"shuffle2\":\"ShellGame_shuffle2__2AEoQ\",\"second\":\"ShellGame_second__3ZvQG\",\"shuffle3\":\"ShellGame_shuffle3__2-ADs\",\"third\":\"ShellGame_third__3g8AX\"};"],"sourceRoot":""}